from datetime import datetime
from course_planner.crew import CoursePlanner
from langchain_google_genai import ChatGoogleGenerativeAI
import browser_use
import asyncio
from dotenv import load_dotenv
import os
import sys
import importlib

try:
    import pysqlite3
    sys.modules["sqlite3"] = pysqlite3
    sys.modules["sqlite3.dbapi2"] = pysqlite3.dbapi2
except ImportError:
    raise RuntimeError("pysqlite3-binary not installed. Add it to requirements.txt.")


load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

def run():
    try:
        print("🎓 Welcome to AI Course Learning Guide Generator!")
        print("=" * 50)
        
        course_name = input("Enter the technical course/technology name (e.g., Node.js, React, DSA, Python): ")
        duration = input("Enter your learning duration (e.g., 3 months, 6 weeks, 1 year): ")
        skill_level = input("Enter your current skill level (beginner/intermediate/advanced): ")
        daily_hours = input("How many hours can you dedicate daily for learning? ")
        learning_style = input("Preferred learning style (visual/hands-on/reading/mixed): ")
        career_goal = input("What's your career goal? (e.g., web developer, data scientist, software engineer): ")

        inputs = {
            "course_name": course_name,
            "duration": duration,
            "skill_level": skill_level,
            "daily_hours": daily_hours,
            "learning_style": learning_style,
            "career_goal": career_goal,
            "current_date": f"{datetime.now().year}-{datetime.now().month}-{datetime.now().day}",
        }

        print(f"\n🚀 Generating comprehensive learning guide for {course_name}...")
        print(f"📅 Duration: {duration}")
        print(f"📊 Skill Level: {skill_level}")
        print(f"⏰ Daily Hours: {daily_hours}")
        print("\nProcessing with AI agents...\n")

        result = CoursePlanner().crew().kickoff(inputs=inputs)
        
        print("\n✅ Learning guide generated successfully!")
        print("📁 Check the 'output' folder for detailed files:")
        print("   - curriculum.md (Course structure)")
        print("   - timeline.md (Learning schedule)")
        print("   - resources.md (Learning materials)")
        print("   - projects.md (Hands-on projects)")
        print("   - assessments.md (Progress tracking)")
        print("   - career_pathway.md (Career guidance)")
        print("   - prerequisites.md (Required knowledge)")
        print("   - study_strategy.md (Learning techniques)")
        print("   - communities.md (Networking opportunities)")
        print("   - certifications.md (Validation roadmap)")

        return result

    except Exception as e:
        raise Exception(f"An error occurred while running the crew: {e}")

def generate_final_guide():
    """Combine all outputs into a single comprehensive guide"""
    try:
        output_files = [
            "prerequisites.md",
            "curriculum.md", 
            "timeline.md",
            "resources.md",
            "projects.md",
            "study_strategy.md",
            "assessments.md",
            "communities.md",
            "certifications.md",
            "career_pathway.md"
        ]
        
        with open("output/COMPLETE_LEARNING_GUIDE.md", "w", encoding="utf-8") as final_guide:
            final_guide.write("# 🎓 Complete Technical Learning Guide\n\n")
            final_guide.write("*Generated by AI Course Learning Guide Generator*\n\n")
            final_guide.write("---\n\n")
            
            for file_name in output_files:
                file_path = f"output/{file_name}"
                if os.path.exists(file_path):
                    with open(file_path, "r", encoding="utf-8") as f:
                        content = f.read()
                        final_guide.write(f"{content}\n\n---\n\n")
        
        print("📖 Complete learning guide created: output/COMPLETE_LEARNING_GUIDE.md")
        
    except Exception as e:
        print(f"Error generating final guide: {e}")

if __name__ == "__main__":
    # Create output directory if it doesn't exist
    os.makedirs("output", exist_ok=True)
    
    # Run the course planning crew
    run()
    
    # Generate the complete guide
    generate_final_guide()
    
    print("\n🎉 Your personalized learning journey is ready!")
    print("Happy Learning! 📚✨")
